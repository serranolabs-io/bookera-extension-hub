/* tslint:disable */
/* eslint-disable */
/**
 * Extension Config API
 * API to submit and publish an ExtensionConfig object
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type { CreateExtension201Response, Extension } from '../models/index';
import {
  CreateExtension201ResponseFromJSON,
  CreateExtension201ResponseToJSON,
  ExtensionFromJSON,
  ExtensionToJSON,
} from '../models/index';

export interface CreateExtensionRequest {
  extension: Extension;
}

export interface GetAllExtensionsRequest {
  isPublished: boolean;
  userId?: string;
  isDownloaded?: boolean;
  filterByUserId?: string;
}

export interface UpdateUserExtensionRequest {
  configId: string;
  extension: Extension;
}

export interface UpdateUserExtensionImageRequest {
  configId: string;
  file?: Blob;
}

/**
 *
 */
export class DefaultApi extends runtime.BaseAPI {
  /**
   * Submit a new extension config
   */
  async createExtensionRaw(
    requestParameters: CreateExtensionRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<CreateExtension201Response>> {
    if (requestParameters['extension'] == null) {
      throw new runtime.RequiredError(
        'extension',
        'Required parameter "extension" was null or undefined when calling createExtension().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/api/extensions`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: ExtensionToJSON(requestParameters['extension']),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue =>
      CreateExtension201ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Submit a new extension config
   */
  async createExtension(
    requestParameters: CreateExtensionRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<CreateExtension201Response> {
    const response = await this.createExtensionRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Fetch all extension configs
   */
  async getAllExtensionsRaw(
    requestParameters: GetAllExtensionsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<Extension>>> {
    if (requestParameters['isPublished'] == null) {
      throw new runtime.RequiredError(
        'isPublished',
        'Required parameter "isPublished" was null or undefined when calling getAllExtensions().'
      );
    }

    const queryParameters: any = {};

    if (requestParameters['isPublished'] != null) {
      queryParameters['isPublished'] = requestParameters['isPublished'];
    }

    if (requestParameters['userId'] != null) {
      queryParameters['userId'] = requestParameters['userId'];
    }

    if (requestParameters['isDownloaded'] != null) {
      queryParameters['isDownloaded'] = requestParameters['isDownloaded'];
    }

    if (requestParameters['filterByUserId'] != null) {
      queryParameters['filterByUserId'] = requestParameters['filterByUserId'];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/extensions`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue => jsonValue.map(ExtensionFromJSON));
  }

  /**
   * Fetch all extension configs
   */
  async getAllExtensions(
    requestParameters: GetAllExtensionsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<Extension>> {
    const response = await this.getAllExtensionsRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Update a user\'s extension
   */
  async updateUserExtensionRaw(
    requestParameters: UpdateUserExtensionRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['configId'] == null) {
      throw new runtime.RequiredError(
        'configId',
        'Required parameter "configId" was null or undefined when calling updateUserExtension().'
      );
    }

    if (requestParameters['extension'] == null) {
      throw new runtime.RequiredError(
        'extension',
        'Required parameter "extension" was null or undefined when calling updateUserExtension().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/api/extensions/{config_id}`.replace(
          `{${'config_id'}}`,
          encodeURIComponent(String(requestParameters['configId']))
        ),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: ExtensionToJSON(requestParameters['extension']),
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Update a user\'s extension
   */
  async updateUserExtension(
    requestParameters: UpdateUserExtensionRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.updateUserExtensionRaw(requestParameters, initOverrides);
  }

  /**
   * Update a user\'s extension image
   */
  async updateUserExtensionImageRaw(
    requestParameters: UpdateUserExtensionImageRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['configId'] == null) {
      throw new runtime.RequiredError(
        'configId',
        'Required parameter "configId" was null or undefined when calling updateUserExtensionImage().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const consumes: runtime.Consume[] = [{ contentType: 'multipart/form-data' }];
    // @ts-ignore: canConsumeForm may be unused
    const canConsumeForm = runtime.canConsumeForm(consumes);

    let formParams: { append(param: string, value: any): any };
    let useForm = false;
    // use FormData to transmit files using content-type "multipart/form-data"
    useForm = canConsumeForm;
    if (useForm) {
      formParams = new FormData();
    } else {
      formParams = new URLSearchParams();
    }

    if (requestParameters['file'] != null) {
      formParams.append('file', requestParameters['file'] as any);
    }

    const response = await this.request(
      {
        path: `/api/extensions/{config_id}/image`.replace(
          `{${'config_id'}}`,
          encodeURIComponent(String(requestParameters['configId']))
        ),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: formParams,
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Update a user\'s extension image
   */
  async updateUserExtensionImage(
    requestParameters: UpdateUserExtensionImageRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.updateUserExtensionImageRaw(requestParameters, initOverrides);
  }
}
